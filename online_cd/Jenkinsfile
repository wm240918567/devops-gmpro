pipeline{
    environment{
        IMAGE_NAME =  sh(returnStdout: true,script: 'echo $image_name').trim()
        IMAGE_TAG =  sh(returnStdout: true,script: 'echo $image_tag').trim()
        REPLICAS =  sh(returnStdout: true,script: 'echo $replicas').trim()
        IMAGE_ENV =  sh(returnStdout: true,script: 'echo $image_env').trim()
        HEALTH_PATH =  sh(returnStdout: true,script: 'echo $health_path').trim()
    }

    agent{
        node{
            label 'slave-pipeline-online'
        }
    }

    stages{
         //部署应用到Kubernetes集群
        stage('Deploy'){
            steps{
                script{
                    container("kubectl") {
                        echo "Building..${IMAGE_ENV}"
                        sh "kubectl get pods"
                        sh "cp /usr/local/config ~/.kube/"
                        sh "kubectl get pods"
                        //sleep 500
                        //sh "sed -i 's/IMAGE_ENV/${IMAGE_ENV}/g' `pwd`/cd/deployment.yaml"
                        step([$class: 'KubernetesDeploy', authMethod: 'certs', apiServerUrl: 'https://172.16.0.155:6443', credentialsId:'onlinek8sCertAuth', config: 'online_cd/deployment.yaml',variableState: 'IMAGE_TAG,IMAGE_NAME,REPLICAS,IMAGE_ENV,HEALTH_PATH'])
                        for(i=1;i<=4;i++){
                            sleep 20
                            server_output = sh(returnStdout: true, script: 'timeout -t 10 kubectl rollout status deployment ${image_name}-${image_env} || echo "error"')
                            if (server_output.contains("successfully")) {
                                break
                            }else{
                                echo "重试中${i}"
                            }
                        }
                        apply_output = sh(returnStdout: true, script: 'timeout -t 10 kubectl rollout status deployment ${image_name}-${image_env} || echo "error"')
                        if (apply_output.contains("successfully")) {
                            echo "应用发版成功"
                        } else {
                            echo "应用发版失败，准备回滚"
                            rollback_output = sh(returnStdout: true, script: "kubectl rollout undo deployment ${IMAGE_NAME}-${IMAGE_ENV}")
                            echo "应用已回滚，发送邮件通知"
                            echo rollback_output
                            emailext (
                                mimeType: 'text/html',
                                subject: """${image_name}_${image_tag}_${IMAGE_ENV}发布失败，已回滚""",
                                to: "$mail",
                                body: """<p>发布失败:${image_name}_${image_tag}_${IMAGE_ENV}:</p>
                            <p>Check console output </a>"</p>""",
                            )
                            throw new Exception("发布失败，已回滚");
                        }
                    }
                }
            }
        }
        
        stage('Auto-Merge'){
            steps{
                script{
                    def autoMergeRes = sh(returnStdout: true,script: 'echo `curl -s http://dockerutils:8080/merge?imageName=${image_name}\\&imageTag=${image_tag}\\&env=${image_env}`')
                    if (autoMergeRes.trim().equals('success')) {
                        echo "分支合并成功"
                        emailext (
                            mimeType: 'text/html',
                            subject: """${image_name}_${image_tag}_${IMAGE_ENV}发布、合并成功""",
                            to: "$mail",
                            body: """<p>SUCCESS:${image_name}_${image_tag}_${IMAGE_ENV}</p>""",
                        )
                    } else {
                        def str = "发版成功但分支自动合并master失败，原因：${autoMergeRes}，请管理员务必手动合并代码！"
                        echo str
                        emailext (
                            mimeType: 'text/html',
                            subject: """${image_name}_${image_tag}_${IMAGE_ENV}发布成功、代码合并失败""",
                            to: "$mail",
                            body: """<p>${str}</p>""",
                        )
                        throw new Exception(str);
                    }
                }
            }
        }
    }
}
